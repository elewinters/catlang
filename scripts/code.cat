fn puts(a: i64);
fn printf(fmt: i64, n: i64);

fn strlen(p: i64) -> i64;
fn strcpy(dest: i64, src: i64);

fn malloc(size: i64) -> i64;
fn free(mem: i64);

fn exit(code: i32);
fn system(ptr: i64);

fn scanf(fmt: i64, buf: i64);

fn number() -> i64 {
	puts("gonna return a number :D");

	return 5 + 5;
}

fn hello_str() -> i64 {
	let str: i64 = malloc(15);
	strcpy(str, "Hello, world!");

	return str;
}

fn mystrlen(ptr: i64) -> i64 {
	return strlen(ptr);
}

fn void(num: i32) {
	puts("void...");
}

fn sum(x: i64, y: i64) -> i64 {
	return x + y;
}

fn square(x: i32) -> i32 {
	return x * x;
}

fn main() {
	void(1+1);
	let num: i64 = 50 + "ah" + 20 * 2;

	asm!("xor rax, rax");
	printf("%ld\n", num);

	let len: i64 = mystrlen("test" + 1) + mystrlen("hi");
	
	asm!("xor rax, rax");
	printf("lenght of 'test': %ld\n", len);

	let str: i64 = hello_str();
	puts(str);
	free(str);

	syscall!(1, 1, "does the syscall still work?\n", 29);

	let inputbuf: i64 = malloc(128 + 5);
	scanf("%s", inputbuf);

	puts(inputbuf);	

	exit(0);
}
